import requests
import re
from termcolor import colored


class Proxy:
    def __init__(self, proxy_source="working_proxies.txt", verbose=False):
        self.proxy_source = proxy_source
        with open("default_http_proxies.txt", "a"):
            pass
        if self.proxy_source == "working_proxies.txt":
            with open(self.proxy_source, "a"):
                pass
        else:
            try:
                with open(self.proxy_source, "r") as file:
                    pass
            except FileNotFoundError:
                self.proxy_source = "working_proxies.txt"
        self.verbose = verbose


    def verbose_print(self, message, color="white"):
        if self.verbose:
            print(colored(f"{message}", color))

    def url_request(self, url, timeout=10):
        # make a request to the url using a proxy, return response and proxy
        try:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36'}
            proxy = self.get_proxy()
            response = requests.get(url, proxies=proxy,headers=headers, timeout=timeout)
            return response,proxy
        
        except Exception as e:
            self.verbose_print(f"Error: {e}", "red")
            return False, proxy

    def confirm_working_proxy(self, proxy):
        try:
            #convert proxy dict to string
            proxy_string = str(proxy["http"][7:])
            if proxy_string in open(self.proxy_source).read():
                return self.verbose_print(f"Proxy already exists: {proxy_string}", "yellow")
            else:
                with open(self.proxy_source, "a") as file:
                    file.write(str(proxy_string) + "\n")
            return self.verbose_print(f"Working proxy: {proxy_string}", "green")
        except Exception as e:
                self.verbose_print(f"Error: {e}", "red")
                return None


    def veryfiy_ip(self, ip):
        try:
            if re.match(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d{1,5}", ip) == None:
                return False
            else:
                return True
        except Exception as e:
            return False

    def veryfiy_proxy_file(self, filename):
        try:
            with open(filename, "r") as file:
                proxy_list = file.readlines()
            for ip in proxy_list:
                if self.veryfiy_ip(ip) == True:
                    self.verbose_print(f"Availible proxy in file {filename}", "green")
                    return True
            self.verbose_print(f"No availible proxy in file {filename}", "red")                    
            return False
        except Exception as e:
            self.verbose_print(f"No availible proxy in file {filename}: {e}", "red")
            return False

    def get_proxy_list(self):
        filename = "default_http_proxies.txt"
        try:
            # create file if it doesn't exist
            with open(filename, "a") as file:
                pass
            # get proxies from proxyscrape.com
            url = "https://api.proxyscrape.com/v2/?request=displayproxies&protocol=http&timeout=10000&country=all&ssl=all&anonymity=all&auth="
            response = requests.get(url)
            # save proxies to file
            for ip in response.text.split("\n"):
                if ip in open(filename).read():
                    continue
                with open(filename, "a") as file:
                    file.write(ip)
            # count how many proxies were saved
            ips_found = len(response.text.split("\n"))
            self.verbose_print(f"{ips_found} IP's saved to {filename}", "green")
            return None
        except Exception as e:
            return print(e)

    def get_proxy(self):
        try:
            filename = str(self.proxy_source)
            # check if there are proxies left in the file, switch to default if not
            if not self.veryfiy_proxy_file("default_http_proxies.txt"):
                self.get_proxy_list()
            if not self.veryfiy_proxy_file(filename):
                filename = "default_http_proxies.txt"
            
            with open(filename, "r") as file:
                proxy_list = file.readlines()   
                # Check if the content of the file is empty

            while self.veryfiy_ip(proxy_list[0]) == False:
                del proxy_list[0]
            proxy = proxy_list[0].strip()
            del proxy_list[0]
            with open(filename, "w") as file:
                file.writelines(proxy_list)
            # convert proxy to dict
            proxy = {
                "http": "http://" + str(proxy),
                "https": "http://" + str(proxy),
            }
            self.verbose_print(f"Using proxy: {proxy}", "blue")
            return proxy
        except Exception as e:
            return print(e)

